from sqlalchemy import create_engine, Column, String, Text, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import datetime

# Create engine and session
DATABASE_URL = "sqlite:///rss_feed.db"  # SQLite for simplicity; you can use PostgreSQL
engine = create_engine(DATABASE_URL)
Base = declarative_base()
Session = sessionmaker(bind=engine)
session = Session()

# Define the NewsArticle table
class NewsArticle(Base):
    _tablename_ = 'news_articles'
    id = Column(String, primary_key=True)
    title = Column(String, nullable=False)
    link = Column(String, nullable=False)
    published = Column(DateTime, nullable=False)
    summary = Column(Text, nullable=True)
    category = Column(String, nullable=True)  # For later classification

# Create the table
Base.metadata.create_all(engine)

# Function to store articles in the database
def store_articles(articles):
    for article in articles:
        # Avoid storing duplicates based on link
        if session.query(NewsArticle).filter_by(link=article['link']).first() is None:
            news_article = NewsArticle(
                id=article['link'],
                title=article['title'],
                link=article['link'],
                published=datetime.datetime.strptime(article['published'], '%a, %d %b %Y %H:%M:%S %Z'),
                summary=article['summary']
            )
            session.add(news_article)
    session.commit()

# Store the parsed articles in the database
store_articles(articles)
